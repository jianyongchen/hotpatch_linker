struct obj_file
{
  ElfW(Ehdr) header;            <------------------ELF Header    Elf64_Ehdr
  ElfW(Addr) baseaddr;
  struct obj_section **sections;          <-------------------段表指针数组
  struct obj_section *load_order;
  struct obj_section **load_order_search_start;
  struct obj_string_patch_struct *string_patches;
  struct obj_symbol_patch_struct *symbol_patches;
  int (*symbol_cmp)(const char *, const char *);      strcmp
  unsigned long (*symbol_hash)(const char *);        obj_elf_hash
  
  unsigned long local_symtab_size;                 local symbols size
  struct obj_symbol **local_symtab;                local symbols table
  struct obj_symbol *symtab[HASH_BUCKETS];         all symbol
  const char *filename;
  char *persist;
};


ELF Header:
typedef struct
{
  unsigned char e_ident[EI_NIDENT];     /* Magic number and other info */
  Elf64_Half    e_type;                 /* Object file type */                     ELF文件类型（ET_REL、ET_EXEC、ET_DYN、ET_CORE）
  Elf64_Half    e_machine;              /* Architecture */
  Elf64_Word    e_version;              /* Object file version */
  Elf64_Addr    e_entry;                /* Entry point virtual address */
  Elf64_Off     e_phoff;                /* Program header table file offset */
  Elf64_Off     e_shoff;                /* Section header table file offset */     段表在文件中的偏移
  Elf64_Word    e_flags;                /* Processor-specific flags */
  Elf64_Half    e_ehsize;               /* ELF header size in bytes */             ELF文件头大小
  Elf64_Half    e_phentsize;            /* Program header table entry size */
  Elf64_Half    e_phnum;                /* Program header table entry count */
  Elf64_Half    e_shentsize;            /* Section header table entry size */      段表描述符的大小  = sizeof(Elf64_Shdr)
  Elf64_Half    e_shnum;                /* Section header table entry count */     段表描述符的数量
  Elf64_Half    e_shstrndx;             /* Section header string table index */    字符串表在段表中的索引
} Elf64_Ehdr;



struct obj_section
{
  ElfW(Shdr) header;   <------------------------段描述符
  const char *name;    <------------------------段名 
  char *contents;      <------------------------段的内容
  struct obj_section *load_next;
  int idx;
};

Section Header:
typedef struct
{
  Elf64_Word    sh_name;                /* Section name (string tbl index) */              段名
  Elf64_Word    sh_type;                /* Section type */                                 SHT_SYMTAB/SHT_STRTAB/SHT_RELA
  Elf64_Xword   sh_flags;               /* Section flags */
  Elf64_Addr    sh_addr;                /* Section virtual addr at execution */            虚拟地址
  Elf64_Off     sh_offset;              /* Section file offset */                          段在文件中的偏移
  Elf64_Xword   sh_size;                /* Section size in bytes */                        段的长度
  Elf64_Word    sh_link;                /* Link to another section */
  Elf64_Word    sh_info;                /* Additional section information */
  Elf64_Xword   sh_addralign;           /* Section alignment */
  Elf64_Xword   sh_entsize;             /* Entry size if section holds table */            entry size = sizeof(Elf64_Sym)
} Elf64_Shdr;

符号entry结构
typedef struct
{
  Elf64_Word    st_name;                /* Symbol name (string tbl index) */    符号名
  unsigned char st_info;                /* Symbol type and binding */
  unsigned char st_other;               /* Symbol visibility */
  Elf64_Section st_shndx;               /* Section index */
  Elf64_Addr    st_value;               /* Symbol value */     符号在段st_shndx中的偏移
  Elf64_Xword   st_size;                /* Symbol size */
} Elf64_Sym;


重定位entry结构
typedef struct           
{
  Elf64_Addr    r_offset;               /* Address */              重定位入口的偏移
  Elf64_Xword   r_info;                 /* Relocation type and symbol index */    低8位：重定位入口的类型； 高24位：重定位入口的符号在符号表中的下标
  Elf64_Sxword  r_addend;               /* Addend */
} Elf64_Rela;